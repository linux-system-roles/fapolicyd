---
- name: Set platform/version specific variables
  include_tasks: set_vars.yml

- name: System check
  fail:
    msg:
      - Only Enterprise Linux >= 8.1 and Fedora are supported
      - System - {{ ansible_facts.os_family }}
      - Version - {{ ansible_facts.distribution_version }}
  when: not __fapolicyd_supported

- name: Check trust compatibility
  fail:
    msg: >-
      Fapolicyd does not support trust setting fapolicyd_setup_trust
      on EL version < 8.3
  ignore_errors: true
  when:
    - fapolicyd_setup_trust | length > 0
    - not __fapolicyd_trust_supported
  register: __failed_check_trust

- name: Check integrity compatibility
  fail:
    msg: >-
      Fapolicyd does not support integrity setting fapolicyd_setup_integrity
      on EL version < 8.4
  ignore_errors: true
  when:
    - fapolicyd_setup_integrity | length > 0
    - not __fapolicyd_integrity_supported
  register: __failed_check_integrity

- name: Check trust files compatibility
  fail:
    msg: >-
      Fapolicyd does not support trust files setting fapolicyd_add_trusted_file
      on EL version < 8.4
  ignore_errors: true
  when:
    - fapolicyd_add_trusted_file | length > 0
    - not __fapolicyd_trustfiles_supported
  register: __failed_check_trusted_file

- name: Check failed conditions
  fail:
    msg: Multiple failed conditions
  when: __failed_check_trust is failed or __failed_check_integrity is failed or
    __failed_check_trusted_file is failed

- name: Install fapolicyd packages
  package:
    name: "{{ __pkgs }}"
    state: present
    use: "{{ (__fapolicyd_is_ostree | d(false)) |
             ternary('ansible.posix.rhel_rpm_ostree', omit) }}"
  vars:
    __pkgs: "{{ __fapolicyd_packages + (__fapolicyd_selinux_packages
      if __fapolicyd_selinux_supported else []) }}"

- name: Copy fapolicyd configuration file
  template:
    src: "{{ __fapolicyd_conf }}.j2"
    dest: "{{ __fapolicyd_dir }}/{{ __fapolicyd_conf }}"
    owner: root
    group: fapolicyd
    mode: "0644"
  register: __fapolicy_conf

- name: Run fapolicyd configuration check
  command: fapolicyd-cli --check-config
  check_mode: false
  changed_when: false
  when:
    - __fapolicyd_configcheck_supported | bool
    - __fapolicy_conf is changed

- name: Trustdb cleanup
  command: fapolicyd-cli --file delete /
  changed_when: true
  failed_when: false

- name: Add file to trustdb
  command: fapolicyd-cli --file add {{ item | quote }}
  loop: "{{ (fapolicyd_add_trusted_file is string) |
    ternary([fapolicyd_add_trusted_file], fapolicyd_add_trusted_file) }}"
  when: item | length > 0
  changed_when: true
  register: __fapolicy_files

- name: Remove state file
  file:
    path: "{{ __fapolicyd_state_file }}"
    state: absent

- name: Start fapolicyd service
  service:
    name: "{{ __fapolicyd_services }}"
    state: started
    enabled: true
  when: fapolicyd_setup_enable_service | bool
  ignore_errors: true  # errors handled below
  register: __fapolicyd_start

- name: Restart and verify fapolicyd service
  when:
    - fapolicyd_setup_enable_service | bool
    - __fapolicy_conf is changed or __fapolicy_files is changed
  block:
    - name: Restart fapolicyd service
      service:
        name: "{{ __fapolicyd_services }}"
        state: restarted
        enabled: true
      ignore_errors: true  # errors handled below
      register: __fapolicyd_restart

    - name: Check if server is started and listening
      command:
        cmd: fapolicyd-cli --check-status
        creates: "{{ __fapolicyd_state_file }}"
      changed_when: false
      register: __fapolicyd_check_stats
      until: __fapolicyd_check_stats is success

- name: Check fapolicyd logs
  command: journalctl -n5 -u {{ __fapolicyd_services | quote }}
  register: __fapolicyd_results
  changed_when: false
  when: __fapolicyd_start is failed or __fapolicyd_restart is failed
  failed_when: __fapolicyd_start is failed or __fapolicyd_restart is failed

- name: Making sure fapolicyd does not run if it was set so
  service:
    name: "{{ __fapolicyd_services }}"
    state: stopped
    enabled: false
  when: not fapolicyd_setup_enable_service
